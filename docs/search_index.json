[
["index.html", "Linear Regression Chapter 1 Introduction", " Linear Regression Joyce Robbins 2020-07-28 Chapter 1 Introduction "],
["added-variable-plots.html", "Chapter 2 Added variable plots", " Chapter 2 Added variable plots p. 54 Figure 3.3(a) Compute the regression of lifeExpF on log(ppgdp): library(alr4) library(tidyverse) library(plotly) u &lt;- UN11 mod1 &lt;- lm(u$lifeExpF ~ log(u$ppgdp)) mod1 ## ## Call: ## lm(formula = u$lifeExpF ~ log(u$ppgdp)) ## ## Coefficients: ## (Intercept) log(u$ppgdp) ## 29.815 5.019 summary(mod1)$r.squared ## [1] 0.5963835 u$`Model 1 residuals` &lt;- ifelse(mod1$residuals &gt; 0, &quot;higher than expected lifeExpF&quot;, &quot;lower than expected lifeExpF&quot;) g &lt;- ggplot(u, aes(log(ppgdp), lifeExpF, label = rownames(u), color = `Model 1 residuals`)) + geom_point() + geom_smooth(aes(group = 1), method = &quot;lm&quot;, se=FALSE, show.legend =FALSE) + ggtitle(&quot;Model 1&quot;) g The residuals from this model are the part of the response lifeExpF not explained by the regression on log(ppgdp) Compute the regression of fertility on log(ppgdp). The residuals from this model are the part of the new regressor fertility not explained by the regression on log(ppgdp) mod2 &lt;- lm(u$fertility ~ log(u$ppgdp)) mod2 ## ## Call: ## lm(formula = u$fertility ~ log(u$ppgdp)) ## ## Coefficients: ## (Intercept) log(u$ppgdp) ## 8.0097 -0.6201 summary(mod2)$r.squared ## [1] 0.5199563 g &lt;- ggplot(u, aes(log(ppgdp), fertility, label = rownames(u), color = `Model 1 residuals`)) + geom_point() + geom_smooth(aes(group = 1), method = &quot;lm&quot;, se=FALSE, show.legend = FALSE) + ggtitle(&quot;Model 2&quot;) g The added variable plot is of the unexplained part of the response from (1) on the unexplained part of the added regressor from (2). residdf &lt;- tibble::tibble(r1 = mod1$residuals, r2 = mod2$residuals) g &lt;- ggplot(residdf, aes(r2, r1)) + geom_point() + xlab(expression(paste(hat(e), &quot; from fertility on log(ppgdp)&quot;))) + ylab(expression(paste(hat(e), &quot; from lifeExpF on log(ppgdp)&quot;))) + geom_smooth(method = &quot;lm&quot;, se=FALSE) g The slope of this regression line is: lm(residdf$r1~residdf$r2) ## ## Call: ## lm(formula = residdf$r1 ~ residdf$r2) ## ## Coefficients: ## (Intercept) residdf$r2 ## 7.681e-16 -4.199e+00 It is the same as the coefficient of \\(\\hat{\\beta_2}\\) with both regressors: u$logppgdp &lt;- log(u$ppgdp) mod &lt;- lm(lifeExpF ~ fertility + logppgdp, data = u) mod ## ## Call: ## lm(formula = lifeExpF ~ fertility + logppgdp, data = u) ## ## Coefficients: ## (Intercept) fertility logppgdp ## 63.448 -4.199 2.415 "],
["interactive-regression-plane.html", "Chapter 3 Interactive regression plane", " Chapter 3 Interactive regression plane library(alr4) library(tidyverse) library(plotly) u &lt;- UN11 u$logppgdp &lt;- log(u$ppgdp) mod &lt;- lm(lifeExpF ~ fertility + logppgdp, data = u) mod ## ## Call: ## lm(formula = lifeExpF ~ fertility + logppgdp, data = u) ## ## Coefficients: ## (Intercept) fertility logppgdp ## 63.448 -4.199 2.415 # https://community.plotly.com/t/3d-scatter-3d-regression-line/4149 # predict over sensible grid of values # #f &lt;- unique(u$fertility) #g &lt;- unique(u$logppgdp) f &lt;- 0:8 g &lt;- 5:11 grid &lt;- expand.grid(f, g) d &lt;- setNames(data.frame(grid), c(&quot;fertility&quot;, &quot;logppgdp&quot;)) vals &lt;- predict(mod, newdata = d) # form matrix and give to plotly # x has to be the second variable and y the first or # do m &lt;- m(t) m &lt;- matrix(vals, nrow = 9, ncol = 7) um &lt;- broom::augment(mod) %&gt;% rename(country = .rownames) %&gt;% mutate(label = paste(country, &quot;&lt;br&gt;lifeExpF: &quot;, lifeExpF, &quot;&lt;br&gt;lifeExpF predicted&quot;, round(.fitted, 2)), resids = ifelse(.resid &lt; 0, &quot;-&quot;, &quot;+&quot;)) # https://plotly.com/r/line-and-scatter/ plot_ly() %&gt;% add_trace(data = um, type = &quot;scatter3d&quot;, mode = &quot;markers&quot;, x = ~logppgdp, y = ~fertility, z = ~lifeExpF, # only 8 symbols available for scatter3d: circle, circle-open, # square, square-open, diamond, diamond-open, cross, x # instead using pch symbols, see: # https://plotly-r.com/scatter-traces.html opacity = .5, marker = list(size = 5), color = ~resids, # https://plotly.com/r/hover-text-and-formatting/ text = ~label, hoverinfo = &quot;text&quot;) %&gt;% # https://plotly.com/r/3d-hover/#customize-hover-for-spikelines layout(title = &quot;lifeExpF ~ fertility + log(ppgdp)&quot;, scene = list(xaxis = list(title = &quot;log(ppgdp)&quot;, showspikes = FALSE), yaxis = list(showspikes = FALSE), zaxis = list(showspikes = FALSE))) %&gt;% # default textposition is top center # https://plotly.com/r/reference/#scatter3d-textposition add_text(data = um, x = ~logppgdp, y = ~fertility, z = ~lifeExpF, text = ~resids, textposition = &quot;middle center&quot;, hoverinfo = &quot;none&quot;, size = I(15)) %&gt;% add_surface(x = ~g, y = ~f, z = ~m, opacity = .5, # showscale = FALSE, hoverinfo = &quot;none&quot;, # https://plotly.com/r/3d-hover/#customize-hover-for-surface-contours contours = list(x = list(highlight = FALSE), y = list(highlight = FALSE), z = list(highlight = FALSE))) "]
]
